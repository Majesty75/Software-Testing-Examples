# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_login(self):
    # Test name: Login
    # Step # | name | target | value
    # 1 | open | /PortalMain | 
    self.driver.get("https://login.nitrkl.ac.in/PortalMain")
    # 2 | storeXpathCount | //a[@id="UserCheck_Login_Button"] | loginButtonCount
    self.vars["loginButtonCount"] = len(self.driver.find_elements(By.XPATH, "//a[@id=\"UserCheck_Login_Button\"]"))
    # 3 | echo | login button count ${loginButtonCount} | 
    print("login button count {}".format(self.vars["loginButtonCount"]))
    # 4 | if | ${loginButtonCount}>0 | 
    if self.driver.execute_script("return (arguments[0]>0)", self.vars["loginButtonCount"]):
      # 5 | type | id=LoginUserPassword_auth_username | username
      self.driver.find_element(By.ID, "LoginUserPassword_auth_username").send_keys("username")
      # 6 | type | id=LoginUserPassword_auth_password | password
      self.driver.find_element(By.ID, "LoginUserPassword_auth_password").send_keys("password")
      # 7 | click | id=UserCheck_Login_Button_span | 
      self.driver.find_element(By.ID, "UserCheck_Login_Button_span").click()
      # 8 | else |  | 
    else:
      # 9 | assertElementPresent | id=UserCheck_Logoff_Button_span | 
      elements = self.driver.find_elements(By.ID, "UserCheck_Logoff_Button_span")
      assert len(elements) > 0
      # 10 | end |  | 
    # 11 | close |  | 
    self.driver.close()
  
